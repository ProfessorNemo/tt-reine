# У компании имеется следующий склад (см. рис), три ряда стеллажей, стоящие в ряд по
# 700 ед. Каждый стеллаж содержит 5 полок. Каждая полка содержит 6 ячеек. Между рядами
# стеллажей есть проходы. Между стеллажами в одном ряду проходов нет. Ширина полок
# одинакова и равна ширине прохода. Зеленым цветом обозначены проходы.
# Кладовщику выдается случайный перечень ячеек, из которых требуется взять товар.
# Помогите составить маршрут передвижения кладовщика по складу, начиная движение от
# стола, таким образом, чтобы он затратил минимально возможный путь.
#     1. Достаточно описать шаги алгоритма решения задачи.
#     2. Объясните почему решение оптимальное


#----------------------------------------------------------------------------

# 1. Предварительная обработка
#
# Создадим трехмерную матрицу для представления склада, где каждая ячейка представляет полку, строку и столбец.
# Инициализируем матрицу с заданными размерами: 3 строки (ряды стеллажей), 5 полок в строке и 6 ячеек на полке.
# Отметим проходы между строками как ячейки «прохода».
#
# 2. Обработка ввода
#
# Получим случайный список ячеек для посещения от работника склада.
# Преобразуем каждую координату ячейки в индекс трехмерной матрицы (строка(ряд), полка, ячейка).
#
# 3. Планирование маршрута
#
# Инициализируем текущую позицию в начальной точке (стол).
# Создадим пустой список маршрутов для хранения последовательности ячеек для посещения.
# Выполним итерацию по списку ячеек для посещения:
#   Для каждой ячейки вычислим манхэттенское расстояние (L1-метрика) от текущей позиции до ячейки.
#   Выберим ячейку с минимальным расстоянием и добавим ее в список маршрутов.
#   Обновим текущую позицию до выбранной ячейки.
#   Повторим шаг 3, пока не будут посещены все ячейки.
#  (здесь применяется алгоритм поиска в ширину, который представляет собой алгоритм обхода графа)
# 4. Оптимизация маршрута
#
# Пройдемся по списку маршрутов и проверим наличие смежных ячеек в одном ряду или на полке.
# Если смежные ячейки найдены, объединим их в один ход, сократив общее пройденное расстояние.
#
# Почему решение оптимально:
#
# Алгоритм оптимален, потому что он использует следующие стратегии для минимизации общего пройденного расстояния:
#  1. Манхэттенское расстояние: используя манхэттенское расстояние, мы гарантируем, что алгоритм выберет кратчайший путь между ячейками, что сокращает общее пройденное расстояние.
#  2. "Ленивый" подход: выбирая ячейку с минимальным расстоянием на каждом шаге, мы гарантируем, что алгоритм сделает наиболее эффективный ход на каждом шаге.
#  3. Оптимизация маршрута: объединяя смежные ячейки в одном ряду или на полке, мы уменьшаем количество требуемых ходов, еще больше минимизируя общее пройденное расстояние.
#
# Оптимальность алгоритма можно доказать, показав, что он удовлетворяет следующим свойствам:
#  1. Оптимальность: алгоритм находит кратчайший возможный маршрут, который посещает все ячейки.
#  2. Полнота: алгоритм посещает все ячейки во входном списке.
#  3. Временная сложность: алгоритм имеет полиномиальную временную сложность, что делает его эффективным для больших размеров входных данных.


